{"ast":null,"code":"import React from 'react';\nimport { getNextCheckboxState } from '../helpers/checkbox';\nimport { useDatatableWrapper } from './DatatableWrapper';\n/**\n * Renders a control for selection or deselection of all rows. This is\n * only useful when pagination and checkbox are both enabled. When only\n * some (or none) of the rows are checked, then this will render the\n * number of checked rows, as well as the \"Select all\" button.\n * On the other hand, when all rows are selected, then it will\n * change to \"Deselect all\" button.\n */\n\nexport function BulkCheckboxControl(_ref) {\n  let {\n    controlledProps,\n    classes\n  } = _ref;\n  const {\n    checkboxState: checkboxStateContext,\n    onCheckboxChange: onCheckboxChangeContext,\n    filteredDataLength: filteredDataLengthContext,\n    previouslyModifiedCheckbox,\n    checkboxRefs,\n    body\n  } = useDatatableWrapper();\n  const checkboxState = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.checkboxState) || checkboxStateContext;\n  const onCheckboxChange = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.onCheckboxChange) || onCheckboxChangeContext;\n  const filteredDataLength = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.filteredDataLength) || filteredDataLengthContext;\n  const previouslyUpdatedCheckbox = checkboxState[previouslyModifiedCheckbox.prop];\n  const state = previouslyUpdatedCheckbox === null || previouslyUpdatedCheckbox === void 0 ? void 0 : previouslyUpdatedCheckbox.state;\n  let rendered;\n\n  function onClick(type) {\n    onCheckboxChange({\n      prop: previouslyModifiedCheckbox.prop,\n      idProp: previouslyModifiedCheckbox.idProp,\n      checkboxRefs,\n      nextCheckboxState: getNextCheckboxState({\n        checkboxState,\n        data: body,\n        filteredDataLength,\n        idProp: previouslyModifiedCheckbox.idProp,\n        prop: previouslyModifiedCheckbox.prop,\n        type\n      })\n    });\n  }\n\n  const buttonClassName = (classes === null || classes === void 0 ? void 0 : classes.selectRemoveAllText) || 'text-primary p-0 border-0 bg-transparent';\n\n  if (state === 'all-selected') {\n    rendered = React.createElement(React.Fragment, null, \"All \", filteredDataLength, \" rows selected.\", ' ', React.createElement(\"button\", {\n      type: \"button\",\n      tabIndex: 0,\n      onClick: () => onClick('remove'),\n      className: buttonClassName\n    }, \"Deselect all rows\"));\n  } else if (state === 'some-selected') {\n    rendered = React.createElement(React.Fragment, null, previouslyUpdatedCheckbox === null || previouslyUpdatedCheckbox === void 0 ? void 0 : previouslyUpdatedCheckbox.selected.size, \" rows selected.\", ' ', React.createElement(\"button\", {\n      type: \"button\",\n      tabIndex: 0,\n      onClick: () => onClick('add'),\n      className: buttonClassName\n    }, \"Select all rows\"));\n  } else {\n    // Zero-width space.\n    rendered = React.createElement(\"span\", null, \"\\u200B\");\n  }\n\n  return React.createElement(\"div\", {\n    className: rendered === undefined ? 'invisible' : undefined\n  }, rendered);\n}","map":{"version":3,"names":["React","getNextCheckboxState","useDatatableWrapper","BulkCheckboxControl","controlledProps","classes","checkboxState","checkboxStateContext","onCheckboxChange","onCheckboxChangeContext","filteredDataLength","filteredDataLengthContext","previouslyModifiedCheckbox","checkboxRefs","body","previouslyUpdatedCheckbox","prop","state","rendered","onClick","type","idProp","nextCheckboxState","data","buttonClassName","selectRemoveAllText","createElement","Fragment","tabIndex","className","selected","size","undefined"],"sources":["C:/wamp64/www/KV/bankovnisustav/node_modules/react-bs-datatable/lib/esm/components/BulkCheckboxControl.js"],"sourcesContent":["import React from 'react';\nimport { getNextCheckboxState } from '../helpers/checkbox';\nimport { useDatatableWrapper } from './DatatableWrapper';\n/**\n * Renders a control for selection or deselection of all rows. This is\n * only useful when pagination and checkbox are both enabled. When only\n * some (or none) of the rows are checked, then this will render the\n * number of checked rows, as well as the \"Select all\" button.\n * On the other hand, when all rows are selected, then it will\n * change to \"Deselect all\" button.\n */\nexport function BulkCheckboxControl({ controlledProps, classes }) {\n    const { checkboxState: checkboxStateContext, onCheckboxChange: onCheckboxChangeContext, filteredDataLength: filteredDataLengthContext, previouslyModifiedCheckbox, checkboxRefs, body } = useDatatableWrapper();\n    const checkboxState = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.checkboxState) || checkboxStateContext;\n    const onCheckboxChange = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.onCheckboxChange) || onCheckboxChangeContext;\n    const filteredDataLength = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.filteredDataLength) || filteredDataLengthContext;\n    const previouslyUpdatedCheckbox = checkboxState[previouslyModifiedCheckbox.prop];\n    const state = previouslyUpdatedCheckbox === null || previouslyUpdatedCheckbox === void 0 ? void 0 : previouslyUpdatedCheckbox.state;\n    let rendered;\n    function onClick(type) {\n        onCheckboxChange({\n            prop: previouslyModifiedCheckbox.prop,\n            idProp: previouslyModifiedCheckbox.idProp,\n            checkboxRefs,\n            nextCheckboxState: getNextCheckboxState({\n                checkboxState,\n                data: body,\n                filteredDataLength,\n                idProp: previouslyModifiedCheckbox.idProp,\n                prop: previouslyModifiedCheckbox.prop,\n                type\n            })\n        });\n    }\n    const buttonClassName = (classes === null || classes === void 0 ? void 0 : classes.selectRemoveAllText) || 'text-primary p-0 border-0 bg-transparent';\n    if (state === 'all-selected') {\n        rendered = (React.createElement(React.Fragment, null,\n            \"All \",\n            filteredDataLength,\n            \" rows selected.\",\n            ' ',\n            React.createElement(\"button\", { type: \"button\", tabIndex: 0, onClick: () => onClick('remove'), className: buttonClassName }, \"Deselect all rows\")));\n    }\n    else if (state === 'some-selected') {\n        rendered = (React.createElement(React.Fragment, null, previouslyUpdatedCheckbox === null || previouslyUpdatedCheckbox === void 0 ? void 0 :\n            previouslyUpdatedCheckbox.selected.size,\n            \" rows selected.\",\n            ' ',\n            React.createElement(\"button\", { type: \"button\", tabIndex: 0, onClick: () => onClick('add'), className: buttonClassName }, \"Select all rows\")));\n    }\n    else {\n        // Zero-width space.\n        rendered = React.createElement(\"span\", null, \"\\u200B\");\n    }\n    return (React.createElement(\"div\", { className: rendered === undefined ? 'invisible' : undefined }, rendered));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}