{"ast":null,"code":"import React from 'react';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { makeClasses } from '../helpers/object';\nimport { useDatatableWrapper } from './DatatableWrapper';\n/**\n * Renders a control for the pagination. It consists of \"First\", \"Prev\",\n * \"Next\", and \"Last\" buttons. Additionally, between the \"Prev\" and \"Next\" buttons,\n * there will be at maximum 3 numbered buttons, indicating the pages to navigate.\n *\n * The currently active page will always be disabled, as well as the \"First\" or \"Last\"\n * buttons if the `currentPage` represents the first page and last page, respectively.\n *\n * When `alwaysShowPagination` is set to `false`, then this component will be visually hidden.\n */\n\nexport function Pagination(_ref) {\n  let {\n    labels,\n    classes,\n    alwaysShowPagination = true,\n    controlledProps\n  } = _ref;\n  const {\n    currentPageState: currentPageStateContext,\n    maxPage: maxPageContext,\n    onPaginationChange: onPaginationChangeContext\n  } = useDatatableWrapper(); // Controlled has the bigger priority.\n\n  const currentPageState = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.currentPage) || currentPageStateContext;\n  const maxPage = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.maxPage) || maxPageContext;\n  const onPaginationChange = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.onPaginationChange) || onPaginationChangeContext; // Hide pagination if pagination is meant to not always be shown and the max page is 1,\n  // or if rows per page is -1.\n\n  const hidePagination = !alwaysShowPagination && maxPage === 1;\n  const buttons = [];\n  const firstLabel = (labels === null || labels === void 0 ? void 0 : labels.firstPage) || 'First';\n  const prevLabel = (labels === null || labels === void 0 ? void 0 : labels.prevPage) || 'Prev';\n  const nextLabel = (labels === null || labels === void 0 ? void 0 : labels.nextPage) || 'Next';\n  const lastLabel = (labels === null || labels === void 0 ? void 0 : labels.lastPage) || 'Last';\n  let startNumber;\n  let i = 0;\n  let hasPrev = true;\n  let hasNext = true;\n\n  if (currentPageState === 1) {\n    // Active button is the first one.\n    startNumber = 1;\n    hasPrev = false;\n    hasNext = maxPage > 1;\n  } else if (currentPageState === maxPage && maxPage !== 1) {\n    // Active button is in the last.\n    startNumber = maxPage - 2 > 0 ? currentPageState - 2 : 1;\n    hasNext = false;\n  } else {\n    // Active button is in the middle.\n    startNumber = currentPageState - 1;\n  }\n\n  buttons.push(React.createElement(Button, {\n    className: classes === null || classes === void 0 ? void 0 : classes.button,\n    key: `page-${firstLabel}`,\n    onClick: () => onPaginationChange(1),\n    disabled: !hasPrev\n  }, firstLabel), React.createElement(Button, {\n    className: classes === null || classes === void 0 ? void 0 : classes.button,\n    key: `page-${prevLabel}`,\n    // If out of bounds, prev button refers to the last page.\n    onClick: () => onPaginationChange(currentPageState - 1),\n    disabled: !hasPrev\n  }, prevLabel));\n  const pageNumbers = [];\n\n  while (i < 3 && startNumber <= maxPage) {\n    pageNumbers.push(startNumber); // Increment all.\n\n    i += 1;\n    startNumber += 1;\n  }\n\n  buttons.push(...pageNumbers.map(pageNumber => React.createElement(Button, {\n    key: `page-btn-${pageNumber}`,\n    onClick: () => onPaginationChange(pageNumber),\n    disabled: currentPageState === pageNumber,\n    className: classes === null || classes === void 0 ? void 0 : classes.button\n  }, pageNumber)), React.createElement(Button, {\n    className: classes === null || classes === void 0 ? void 0 : classes.button,\n    key: `page-${nextLabel}`,\n    onClick: () => onPaginationChange(currentPageState + 1),\n    disabled: !hasNext\n  }, nextLabel), React.createElement(Button, {\n    className: classes === null || classes === void 0 ? void 0 : classes.button,\n    key: `page-${lastLabel}`,\n    onClick: () => onPaginationChange(maxPage),\n    disabled: !hasNext\n  }, lastLabel));\n  return React.createElement(ButtonGroup, {\n    \"aria-label\": \"Pagination button group\",\n    className: makeClasses('ButtonGroup__root', classes === null || classes === void 0 ? void 0 : classes.buttonGroup, {\n      invisible: hidePagination\n    })\n  }, buttons);\n}","map":{"version":3,"names":["React","Button","ButtonGroup","makeClasses","useDatatableWrapper","Pagination","labels","classes","alwaysShowPagination","controlledProps","currentPageState","currentPageStateContext","maxPage","maxPageContext","onPaginationChange","onPaginationChangeContext","currentPage","hidePagination","buttons","firstLabel","firstPage","prevLabel","prevPage","nextLabel","nextPage","lastLabel","lastPage","startNumber","i","hasPrev","hasNext","push","createElement","className","button","key","onClick","disabled","pageNumbers","map","pageNumber","buttonGroup","invisible"],"sources":["C:/wamp64/www/KV/bankovnisustav/node_modules/react-bs-datatable/lib/esm/components/Pagination.js"],"sourcesContent":["import React from 'react';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { makeClasses } from '../helpers/object';\nimport { useDatatableWrapper } from './DatatableWrapper';\n/**\n * Renders a control for the pagination. It consists of \"First\", \"Prev\",\n * \"Next\", and \"Last\" buttons. Additionally, between the \"Prev\" and \"Next\" buttons,\n * there will be at maximum 3 numbered buttons, indicating the pages to navigate.\n *\n * The currently active page will always be disabled, as well as the \"First\" or \"Last\"\n * buttons if the `currentPage` represents the first page and last page, respectively.\n *\n * When `alwaysShowPagination` is set to `false`, then this component will be visually hidden.\n */\nexport function Pagination({ labels, classes, alwaysShowPagination = true, controlledProps }) {\n    const { currentPageState: currentPageStateContext, maxPage: maxPageContext, onPaginationChange: onPaginationChangeContext } = useDatatableWrapper();\n    // Controlled has the bigger priority.\n    const currentPageState = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.currentPage) || currentPageStateContext;\n    const maxPage = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.maxPage) || maxPageContext;\n    const onPaginationChange = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.onPaginationChange) || onPaginationChangeContext;\n    // Hide pagination if pagination is meant to not always be shown and the max page is 1,\n    // or if rows per page is -1.\n    const hidePagination = !alwaysShowPagination && maxPage === 1;\n    const buttons = [];\n    const firstLabel = (labels === null || labels === void 0 ? void 0 : labels.firstPage) || 'First';\n    const prevLabel = (labels === null || labels === void 0 ? void 0 : labels.prevPage) || 'Prev';\n    const nextLabel = (labels === null || labels === void 0 ? void 0 : labels.nextPage) || 'Next';\n    const lastLabel = (labels === null || labels === void 0 ? void 0 : labels.lastPage) || 'Last';\n    let startNumber;\n    let i = 0;\n    let hasPrev = true;\n    let hasNext = true;\n    if (currentPageState === 1) {\n        // Active button is the first one.\n        startNumber = 1;\n        hasPrev = false;\n        hasNext = maxPage > 1;\n    }\n    else if (currentPageState === maxPage && maxPage !== 1) {\n        // Active button is in the last.\n        startNumber = maxPage - 2 > 0 ? currentPageState - 2 : 1;\n        hasNext = false;\n    }\n    else {\n        // Active button is in the middle.\n        startNumber = currentPageState - 1;\n    }\n    buttons.push(React.createElement(Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${firstLabel}`, onClick: () => onPaginationChange(1), disabled: !hasPrev }, firstLabel), React.createElement(Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${prevLabel}`, \n        // If out of bounds, prev button refers to the last page.\n        onClick: () => onPaginationChange(currentPageState - 1), disabled: !hasPrev }, prevLabel));\n    const pageNumbers = [];\n    while (i < 3 && startNumber <= maxPage) {\n        pageNumbers.push(startNumber);\n        // Increment all.\n        i += 1;\n        startNumber += 1;\n    }\n    buttons.push(...pageNumbers.map((pageNumber) => (React.createElement(Button, { key: `page-btn-${pageNumber}`, onClick: () => onPaginationChange(pageNumber), disabled: currentPageState === pageNumber, className: classes === null || classes === void 0 ? void 0 : classes.button }, pageNumber))), React.createElement(Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${nextLabel}`, onClick: () => onPaginationChange(currentPageState + 1), disabled: !hasNext }, nextLabel), React.createElement(Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${lastLabel}`, onClick: () => onPaginationChange(maxPage), disabled: !hasNext }, lastLabel));\n    return (React.createElement(ButtonGroup, { \"aria-label\": \"Pagination button group\", className: makeClasses('ButtonGroup__root', classes === null || classes === void 0 ? void 0 : classes.buttonGroup, {\n            invisible: hidePagination\n        }) }, buttons));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}