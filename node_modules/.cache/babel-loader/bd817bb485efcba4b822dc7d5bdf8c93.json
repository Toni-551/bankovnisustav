{"ast":null,"code":"import React, { useCallback, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { filterData, getNextSortState, paginateData, sortData } from '../helpers/data';\nimport { convertArrayToRecord } from '../helpers/object';\nimport { createCtx } from '../helpers/react';\nconst [useCtx, Provider] = createCtx();\n/**\n * @internal\n *\n * This is an internal hook to use in all table components.\n */\n\nexport const useDatatableWrapper = useCtx;\nexport function DatatableWrapper(_ref) {\n  let {\n    headers,\n    body,\n    isControlled,\n    filterProps,\n    sortProps,\n    paginationProps,\n    paginationOptionsProps,\n    checkboxProps,\n    tableEventsRef,\n    children\n  } = _ref;\n  const [state, setState] = useState(getDefaultDatatableState({\n    filterProps,\n    headers,\n    sortProps,\n    paginationProps,\n    paginationOptionsProps,\n    checkboxProps\n  }));\n  const headersRecordRef = useRef(convertArrayToRecord(headers, 'prop')); // Store this in a ref because we might need it in case `headers` change.\n  // Though, we don't want to put these into `useEffect` because they most likely\n  // change over time.\n\n  const controlPropsRef = useRef({\n    filterProps,\n    sortProps,\n    paginationProps,\n    paginationOptionsProps,\n    checkboxProps\n  });\n  const checkboxRefs = useTableHeaderCheckbox({\n    headers,\n    initialStates: checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.initialState\n  });\n  useEffect(() => {\n    if (tableEventsRef !== undefined) {\n      console.warn('Warning: Usage of `tableEventsRef` is deprecated. Consider using `useDatatableWrapper`' + 'and raising the `DatatableWrapper` a bit higher in the structure instead.');\n    }\n  }, [tableEventsRef]);\n  useEffect(() => {\n    // Resets the table if the headers passed down is different.\n    if (headers !== undefined && !isControlled) {\n      // Re-set the ref.\n      headersRecordRef.current = convertArrayToRecord(headers, 'prop'); // Re-set the initial state.\n\n      setState(getDefaultDatatableState({\n        filterProps: controlPropsRef.current.filterProps,\n        headers,\n        sortProps: controlPropsRef.current.sortProps,\n        paginationProps: controlPropsRef.current.paginationProps,\n        paginationOptionsProps: controlPropsRef.current.paginationOptionsProps,\n        checkboxProps: controlPropsRef.current.checkboxProps\n      }));\n    }\n  }, [headers, isControlled]);\n  useEffect(() => {\n    // Resets the table if the data passed down is different.\n    if (body !== undefined && !isControlled) {\n      setState(oldState => Object.assign(Object.assign({}, oldState), {\n        filter: '',\n        pagination: Object.assign(Object.assign({}, oldState.pagination), {\n          currentPage: 1\n        })\n      }));\n    }\n  }, [body, isControlled]);\n  const onFilterChange = useCallback(text => {\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      filter: text,\n      pagination: Object.assign(Object.assign({}, oldState.pagination), {\n        currentPage: 1\n      })\n    }));\n  }, []);\n  const onPaginationChange = useCallback(nextPage => {\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      pagination: Object.assign(Object.assign({}, oldState.pagination), {\n        currentPage: nextPage\n      })\n    }));\n  }, []);\n  const onRowsPerPageChange = useCallback(numOfPage => {\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      pagination: Object.assign(Object.assign({}, oldState.pagination), {\n        rowsPerPage: numOfPage,\n        currentPage: 1\n      })\n    }));\n  }, []);\n  const onSortChange = useCallback(nextSort => {\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      sort: nextSort\n    }));\n  }, []);\n  const onSortByPropChange = useCallback(sortedProp => {\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      sort: getNextSortState(oldState.sort, sortedProp)\n    }));\n  }, []);\n  const onCheckboxChange = useCallback(_ref2 => {\n    let {\n      prop,\n      nextCheckboxState,\n      checkboxRefs,\n      idProp\n    } = _ref2;\n    // We put this here because it'll be easier to switch between\n    // controlled and uncontrolled this way.\n    checkboxRefs.current[prop].indeterminate = nextCheckboxState.state === 'some-selected';\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      checkbox: Object.assign(Object.assign({}, oldState.checkbox), {\n        [prop]: nextCheckboxState\n      }),\n      previouslyModifiedCheckbox: {\n        idProp,\n        prop\n      }\n    }));\n  }, []); // Imperative handle.\n  // This is if we want to keep the table events controllable from outside,\n  // without making the table controlled.\n  // TODO(imballinst): rethink about this for the next major version (4.x).\n  // https://github.com/imballinst/react-bs-datatable/pull/123#issuecomment-1050582200.\n\n  useImperativeHandle(tableEventsRef, () => ({\n    onFilterChange,\n    onPaginationChange,\n    onRowsPerPageChange,\n    onSortByPropChange,\n    onCheckboxChange\n  }), []);\n  const {\n    filter,\n    sort,\n    pagination,\n    isFilterable\n  } = state;\n  const {\n    data,\n    filteredDataLength,\n    maxPage\n  } = useMemo(() => {\n    let newData = body;\n    let newFilteredDataLength = newData.length;\n    let newMaxPage = 1;\n\n    if (!isControlled) {\n      // Only do this in uncontrolled mode.\n      if (isFilterable) {\n        newData = filterData(body, headersRecordRef.current, filter);\n        newFilteredDataLength = newData.length;\n      }\n\n      newData = sortData(newData, sort, sortProps === null || sortProps === void 0 ? void 0 : sortProps.sortValueObj);\n\n      if (pagination.rowsPerPage !== -1) {\n        // Pagination needs.\n        newMaxPage = Math.ceil(newData.length / pagination.rowsPerPage);\n        newData = paginateData(newData, pagination.currentPage, pagination.rowsPerPage);\n      }\n    }\n\n    return {\n      data: newData,\n      maxPage: newMaxPage,\n      filteredDataLength: newFilteredDataLength\n    };\n  }, [isControlled, body, filter, sort, pagination, isFilterable]);\n  return React.createElement(Provider, {\n    value: {\n      headers,\n      // Filter.\n      isFilterable: isFilterable,\n      filterState: filter,\n      onFilterChange,\n      // Sort.\n      sortState: sort,\n      onSortChange,\n      onSortByPropChange,\n      // Pagination.\n      currentPageState: pagination.currentPage,\n      onPaginationChange,\n      // Pagination options.\n      rowsPerPageState: pagination.rowsPerPage,\n      rowsPerPageOptions: pagination.rowsPerPageOptions,\n      onRowsPerPageChange,\n      // Checkbox.\n      checkboxState: state.checkbox,\n      previouslyModifiedCheckbox: state.previouslyModifiedCheckbox,\n      onCheckboxChange,\n      checkboxRefs,\n      // Data.\n      maxPage,\n      filteredDataLength,\n      data,\n      body\n    }\n  }, children);\n} // Helper functions.\n\nfunction getDefaultDatatableState(_ref3) {\n  let {\n    filterProps,\n    paginationOptionsProps,\n    paginationProps,\n    sortProps,\n    checkboxProps,\n    headers\n  } = _ref3;\n\n  var _a, _b, _c, _d;\n\n  const defaultSort = (sortProps === null || sortProps === void 0 ? void 0 : sortProps.initialState) || {\n    order: 'asc',\n    prop: ''\n  };\n  const checkbox = (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.initialState) || {};\n  let isFilterable = filterProps !== undefined;\n\n  for (const header of headers) {\n    const prop = header.prop.toString();\n\n    if (defaultSort.prop === '' && header.isSortable) {\n      // If the sorted prop is still \"empty\", then we assign it with the current header.\n      defaultSort.prop = String(header.prop);\n    } // Set the default checkbox values, if not provided from `checkboxProps`.\n\n\n    if (header.checkbox && (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.initialState) === undefined) {\n      checkbox[prop] = {\n        state: 'none-selected',\n        selected: new Set()\n      };\n    }\n\n    if (header.isFilterable) {\n      isFilterable = true;\n    }\n  } // Define initial state.\n\n\n  return {\n    isFilterable,\n    filter: ((_a = filterProps === null || filterProps === void 0 ? void 0 : filterProps.initialState) === null || _a === void 0 ? void 0 : _a.filter) || '',\n    sort: defaultSort,\n    pagination: {\n      currentPage: ((_b = paginationProps === null || paginationProps === void 0 ? void 0 : paginationProps.initialState) === null || _b === void 0 ? void 0 : _b.page) || 1,\n      rowsPerPage: ((_c = paginationOptionsProps === null || paginationOptionsProps === void 0 ? void 0 : paginationOptionsProps.initialState) === null || _c === void 0 ? void 0 : _c.rowsPerPage) || -1,\n      rowsPerPageOptions: ((_d = paginationOptionsProps === null || paginationOptionsProps === void 0 ? void 0 : paginationOptionsProps.initialState) === null || _d === void 0 ? void 0 : _d.options) || []\n    },\n    checkbox,\n    previouslyModifiedCheckbox: {\n      idProp: '',\n      prop: ''\n    }\n  };\n}\n\nfunction useTableHeaderCheckbox(_ref4) {\n  let {\n    headers,\n    initialStates\n  } = _ref4;\n  const checkboxRefs = useRef({});\n  useEffect(() => {\n    if (initialStates) {\n      for (const header of headers) {\n        const prop = header.prop.toString();\n        const checkbox = checkboxRefs.current[prop];\n\n        if (checkbox !== null) {\n          checkbox.indeterminate = initialStates[prop].state === 'some-selected';\n        }\n      }\n    }\n  }, [headers, initialStates]);\n  return checkboxRefs;\n}","map":{"version":3,"names":["React","useCallback","useEffect","useImperativeHandle","useMemo","useRef","useState","filterData","getNextSortState","paginateData","sortData","convertArrayToRecord","createCtx","useCtx","Provider","useDatatableWrapper","DatatableWrapper","headers","body","isControlled","filterProps","sortProps","paginationProps","paginationOptionsProps","checkboxProps","tableEventsRef","children","state","setState","getDefaultDatatableState","headersRecordRef","controlPropsRef","checkboxRefs","useTableHeaderCheckbox","initialStates","initialState","undefined","console","warn","current","oldState","Object","assign","filter","pagination","currentPage","onFilterChange","text","onPaginationChange","nextPage","onRowsPerPageChange","numOfPage","rowsPerPage","onSortChange","nextSort","sort","onSortByPropChange","sortedProp","onCheckboxChange","prop","nextCheckboxState","idProp","indeterminate","checkbox","previouslyModifiedCheckbox","isFilterable","data","filteredDataLength","maxPage","newData","newFilteredDataLength","length","newMaxPage","sortValueObj","Math","ceil","createElement","value","filterState","sortState","currentPageState","rowsPerPageState","rowsPerPageOptions","checkboxState","_a","_b","_c","_d","defaultSort","order","header","toString","isSortable","String","selected","Set","page","options"],"sources":["C:/wamp64/www/KV/bankovnisustav/node_modules/react-bs-datatable/lib/esm/components/DatatableWrapper.js"],"sourcesContent":["import React, { useCallback, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { filterData, getNextSortState, paginateData, sortData } from '../helpers/data';\nimport { convertArrayToRecord } from '../helpers/object';\nimport { createCtx } from '../helpers/react';\nconst [useCtx, Provider] = createCtx();\n/**\n * @internal\n *\n * This is an internal hook to use in all table components.\n */\nexport const useDatatableWrapper = useCtx;\nexport function DatatableWrapper({ headers, body, isControlled, filterProps, sortProps, paginationProps, paginationOptionsProps, checkboxProps, tableEventsRef, children }) {\n    const [state, setState] = useState(getDefaultDatatableState({\n        filterProps,\n        headers,\n        sortProps,\n        paginationProps,\n        paginationOptionsProps,\n        checkboxProps\n    }));\n    const headersRecordRef = useRef(convertArrayToRecord(headers, 'prop'));\n    // Store this in a ref because we might need it in case `headers` change.\n    // Though, we don't want to put these into `useEffect` because they most likely\n    // change over time.\n    const controlPropsRef = useRef({\n        filterProps,\n        sortProps,\n        paginationProps,\n        paginationOptionsProps,\n        checkboxProps\n    });\n    const checkboxRefs = useTableHeaderCheckbox({\n        headers,\n        initialStates: checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.initialState\n    });\n    useEffect(() => {\n        if (tableEventsRef !== undefined) {\n            console.warn('Warning: Usage of `tableEventsRef` is deprecated. Consider using `useDatatableWrapper`' +\n                'and raising the `DatatableWrapper` a bit higher in the structure instead.');\n        }\n    }, [tableEventsRef]);\n    useEffect(() => {\n        // Resets the table if the headers passed down is different.\n        if (headers !== undefined && !isControlled) {\n            // Re-set the ref.\n            headersRecordRef.current = convertArrayToRecord(headers, 'prop');\n            // Re-set the initial state.\n            setState(getDefaultDatatableState({\n                filterProps: controlPropsRef.current.filterProps,\n                headers,\n                sortProps: controlPropsRef.current.sortProps,\n                paginationProps: controlPropsRef.current.paginationProps,\n                paginationOptionsProps: controlPropsRef.current.paginationOptionsProps,\n                checkboxProps: controlPropsRef.current.checkboxProps\n            }));\n        }\n    }, [headers, isControlled]);\n    useEffect(() => {\n        // Resets the table if the data passed down is different.\n        if (body !== undefined && !isControlled) {\n            setState((oldState) => (Object.assign(Object.assign({}, oldState), { filter: '', pagination: Object.assign(Object.assign({}, oldState.pagination), { currentPage: 1 }) })));\n        }\n    }, [body, isControlled]);\n    const onFilterChange = useCallback((text) => {\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { filter: text, pagination: Object.assign(Object.assign({}, oldState.pagination), { currentPage: 1 }) })));\n    }, []);\n    const onPaginationChange = useCallback((nextPage) => {\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { pagination: Object.assign(Object.assign({}, oldState.pagination), { currentPage: nextPage }) })));\n    }, []);\n    const onRowsPerPageChange = useCallback((numOfPage) => {\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { pagination: Object.assign(Object.assign({}, oldState.pagination), { rowsPerPage: numOfPage, currentPage: 1 }) })));\n    }, []);\n    const onSortChange = useCallback((nextSort) => {\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { sort: nextSort })));\n    }, []);\n    const onSortByPropChange = useCallback((sortedProp) => {\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { sort: getNextSortState(oldState.sort, sortedProp) })));\n    }, []);\n    const onCheckboxChange = useCallback(({ prop, nextCheckboxState, checkboxRefs, idProp }) => {\n        // We put this here because it'll be easier to switch between\n        // controlled and uncontrolled this way.\n        checkboxRefs.current[prop].indeterminate =\n            nextCheckboxState.state === 'some-selected';\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { checkbox: Object.assign(Object.assign({}, oldState.checkbox), { [prop]: nextCheckboxState }), previouslyModifiedCheckbox: {\n                idProp,\n                prop\n            } })));\n    }, []);\n    // Imperative handle.\n    // This is if we want to keep the table events controllable from outside,\n    // without making the table controlled.\n    // TODO(imballinst): rethink about this for the next major version (4.x).\n    // https://github.com/imballinst/react-bs-datatable/pull/123#issuecomment-1050582200.\n    useImperativeHandle(tableEventsRef, () => ({\n        onFilterChange,\n        onPaginationChange,\n        onRowsPerPageChange,\n        onSortByPropChange,\n        onCheckboxChange\n    }), []);\n    const { filter, sort, pagination, isFilterable } = state;\n    const { data, filteredDataLength, maxPage } = useMemo(() => {\n        let newData = body;\n        let newFilteredDataLength = newData.length;\n        let newMaxPage = 1;\n        if (!isControlled) {\n            // Only do this in uncontrolled mode.\n            if (isFilterable) {\n                newData = filterData(body, headersRecordRef.current, filter);\n                newFilteredDataLength = newData.length;\n            }\n            newData = sortData(newData, sort, sortProps === null || sortProps === void 0 ? void 0 : sortProps.sortValueObj);\n            if (pagination.rowsPerPage !== -1) {\n                // Pagination needs.\n                newMaxPage = Math.ceil(newData.length / pagination.rowsPerPage);\n                newData = paginateData(newData, pagination.currentPage, pagination.rowsPerPage);\n            }\n        }\n        return {\n            data: newData,\n            maxPage: newMaxPage,\n            filteredDataLength: newFilteredDataLength\n        };\n    }, [isControlled, body, filter, sort, pagination, isFilterable]);\n    return (React.createElement(Provider, { value: {\n            headers,\n            // Filter.\n            isFilterable: isFilterable,\n            filterState: filter,\n            onFilterChange,\n            // Sort.\n            sortState: sort,\n            onSortChange,\n            onSortByPropChange,\n            // Pagination.\n            currentPageState: pagination.currentPage,\n            onPaginationChange,\n            // Pagination options.\n            rowsPerPageState: pagination.rowsPerPage,\n            rowsPerPageOptions: pagination.rowsPerPageOptions,\n            onRowsPerPageChange,\n            // Checkbox.\n            checkboxState: state.checkbox,\n            previouslyModifiedCheckbox: state.previouslyModifiedCheckbox,\n            onCheckboxChange,\n            checkboxRefs,\n            // Data.\n            maxPage,\n            filteredDataLength,\n            data,\n            body\n        } }, children));\n}\n// Helper functions.\nfunction getDefaultDatatableState({ filterProps, paginationOptionsProps, paginationProps, sortProps, checkboxProps, headers }) {\n    var _a, _b, _c, _d;\n    const defaultSort = (sortProps === null || sortProps === void 0 ? void 0 : sortProps.initialState) || {\n        order: 'asc',\n        prop: ''\n    };\n    const checkbox = (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.initialState) || {};\n    let isFilterable = filterProps !== undefined;\n    for (const header of headers) {\n        const prop = header.prop.toString();\n        if (defaultSort.prop === '' && header.isSortable) {\n            // If the sorted prop is still \"empty\", then we assign it with the current header.\n            defaultSort.prop = String(header.prop);\n        }\n        // Set the default checkbox values, if not provided from `checkboxProps`.\n        if (header.checkbox && (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.initialState) === undefined) {\n            checkbox[prop] = { state: 'none-selected', selected: new Set() };\n        }\n        if (header.isFilterable) {\n            isFilterable = true;\n        }\n    }\n    // Define initial state.\n    return {\n        isFilterable,\n        filter: ((_a = filterProps === null || filterProps === void 0 ? void 0 : filterProps.initialState) === null || _a === void 0 ? void 0 : _a.filter) || '',\n        sort: defaultSort,\n        pagination: {\n            currentPage: ((_b = paginationProps === null || paginationProps === void 0 ? void 0 : paginationProps.initialState) === null || _b === void 0 ? void 0 : _b.page) || 1,\n            rowsPerPage: ((_c = paginationOptionsProps === null || paginationOptionsProps === void 0 ? void 0 : paginationOptionsProps.initialState) === null || _c === void 0 ? void 0 : _c.rowsPerPage) || -1,\n            rowsPerPageOptions: ((_d = paginationOptionsProps === null || paginationOptionsProps === void 0 ? void 0 : paginationOptionsProps.initialState) === null || _d === void 0 ? void 0 : _d.options) || []\n        },\n        checkbox,\n        previouslyModifiedCheckbox: {\n            idProp: '',\n            prop: ''\n        }\n    };\n}\nfunction useTableHeaderCheckbox({ headers, initialStates }) {\n    const checkboxRefs = useRef({});\n    useEffect(() => {\n        if (initialStates) {\n            for (const header of headers) {\n                const prop = header.prop.toString();\n                const checkbox = checkboxRefs.current[prop];\n                if (checkbox !== null) {\n                    checkbox.indeterminate =\n                        initialStates[prop].state === 'some-selected';\n                }\n            }\n        }\n    }, [headers, initialStates]);\n    return checkboxRefs;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}