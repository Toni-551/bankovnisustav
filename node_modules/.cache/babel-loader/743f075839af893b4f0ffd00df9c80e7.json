{"ast":null,"code":"import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { makeClasses } from '../helpers/object';\nimport { useDatatableWrapper } from './DatatableWrapper';\nimport { getNextCheckboxState } from '../helpers/checkbox';\n/**\n * Renders the table body, which is a `tbody` tag along with the rest of the elements,\n * such as `tr` and `td` tags.\n */\n\nexport function TableBody(_ref) {\n  let {\n    labels,\n    classes,\n    rowProps,\n    onRowClick: onRowClickProp,\n    controlledProps,\n    children\n  } = _ref;\n  const {\n    data,\n    headers,\n    onCheckboxChange: onCheckboxChangeContext,\n    checkboxState: checkboxStateContext,\n    filteredDataLength: filteredDataLengthContext,\n    checkboxRefs\n  } = useDatatableWrapper();\n  let bodyContent;\n\n  if (children) {\n    if (typeof children === 'function') {\n      bodyContent = children(data);\n    } else {\n      bodyContent = children;\n    }\n  } else {\n    const body = [];\n    const dataLength = data.length;\n    const headersLength = headers.length;\n    const onCheckboxChange = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.onCheckboxChange) || onCheckboxChangeContext;\n    const checkboxState = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.checkboxState) || checkboxStateContext;\n    const filteredDataLength = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.filteredDataLength) || filteredDataLengthContext;\n\n    if (dataLength > 0) {\n      for (let rowIdx = 0; rowIdx < dataLength; rowIdx++) {\n        const row = [];\n\n        for (let colIdx = 0; colIdx < headersLength; colIdx++) {\n          const {\n            cell,\n            cellProps = {},\n            prop: rawProp,\n            checkbox,\n            alignment\n          } = headers[colIdx];\n          const prop = rawProp.toString();\n          let value = '';\n\n          if (checkbox) {\n            // Render checkbox.\n            const idValue = data[rowIdx][checkbox.idProp];\n            const isSelected = checkboxState[prop].selected.has(idValue); // Source for using visually hidden: https://www.w3.org/WAI/tutorials/forms/labels/#hiding-the-label-element.\n\n            value = React.createElement(Form.Group, {\n              controlId: `table-selection-${data[rowIdx][checkbox.idProp]}`\n            }, React.createElement(Form.Label, {\n              className: \"visually-hidden\"\n            }, isSelected ? `Remove ${idValue} from selection` : `Add ${idValue} to selection`), React.createElement(Form.Check, {\n              type: \"checkbox\",\n              name: \"table-selection\",\n              value: data[rowIdx][checkbox.idProp],\n              className: checkbox.className,\n              checked: checkboxState[prop].selected.has(idValue),\n              onChange: () => {\n                onCheckboxChange({\n                  prop,\n                  idProp: checkbox.idProp,\n                  nextCheckboxState: getNextCheckboxState({\n                    checkboxState,\n                    data: data[rowIdx],\n                    idProp: checkbox.idProp,\n                    filteredDataLength,\n                    prop,\n                    type: isSelected ? 'remove' : 'add'\n                  }),\n                  checkboxRefs\n                });\n              }\n            }));\n          } else {\n            // Render normally.\n            if (cell === undefined) {\n              value = data[rowIdx][prop];\n            } else {\n              value = cell(data[rowIdx]);\n            }\n          }\n\n          row.push(React.createElement(\"td\", {\n            key: `col-${rowIdx}${colIdx}`,\n            className: makeClasses('tbody-td', classes === null || classes === void 0 ? void 0 : classes.td, // Alignment.\n            {\n              'text-start': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'left',\n              'text-center': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'center',\n              'text-end': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'right'\n            }, typeof cellProps.className === 'function' ? cellProps.className(data[rowIdx]) : cellProps.className),\n            style: typeof cellProps.style === 'function' ? cellProps.style(data[rowIdx]) : cellProps.style\n          }, value));\n        }\n\n        body.push(React.createElement(TableRow, {\n          key: rowIdx,\n          rowData: data[rowIdx],\n          rowProps: rowProps,\n          classes: {\n            td: classes === null || classes === void 0 ? void 0 : classes.td,\n            tr: classes === null || classes === void 0 ? void 0 : classes.tr\n          },\n          controlledProps: controlledProps,\n          onRowClick: onRowClickProp\n        }));\n      }\n    } else {\n      body.push(React.createElement(EmptyTablePlaceholder, {\n        key: \"row-zero-length\",\n        noResultsLabel: labels === null || labels === void 0 ? void 0 : labels.noResults\n      }));\n    }\n\n    bodyContent = body;\n  }\n\n  return React.createElement(\"tbody\", {\n    className: makeClasses('tbody', classes === null || classes === void 0 ? void 0 : classes.tbody)\n  }, bodyContent);\n}\n/**\n * `TableRow` component, as its name suggests, is a component to render a row of a table.\n * This component is exported so it is possible to compose the rows further. For example:\n *\n * ```\n * <TableBody>\n *   {\n *     data.map(row => (\n *       row.isLoading ? (\n *         <tr><td colSpan={headers.length}><Loading /></td></tr>\n *       ) : (\n *         <TableRow rowData={row} />\n *       )\n *     ))\n *   }\n * </TableBody>\n * ```\n *\n * The above snippet will render loading indicator for rows that don't have sufficient data to store yet.\n *\n * @param param0\n * @returns\n */\n\nexport function TableRow(_ref2) {\n  let {\n    rowData,\n    onRowClick: onRowClickProp,\n    classes,\n    controlledProps,\n    rowProps\n  } = _ref2;\n  const {\n    headers,\n    onCheckboxChange: onCheckboxChangeContext,\n    checkboxState: checkboxStateContext,\n    filteredDataLength: filteredDataLengthContext,\n    checkboxRefs\n  } = useDatatableWrapper();\n  const headersLength = headers.length;\n\n  function onRowClick() {\n    if (typeof onRowClickProp === 'function') {\n      onRowClickProp(rowData);\n    }\n  }\n\n  const onCheckboxChange = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.onCheckboxChange) || onCheckboxChangeContext;\n  const checkboxState = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.checkboxState) || checkboxStateContext;\n  const filteredDataLength = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.filteredDataLength) || filteredDataLengthContext;\n  const row = [];\n\n  for (let colIdx = 0; colIdx < headersLength; colIdx++) {\n    const {\n      cell,\n      cellProps = {},\n      prop: rawProp,\n      checkbox,\n      alignment\n    } = headers[colIdx];\n    const prop = rawProp.toString();\n    let value = '';\n\n    if (checkbox && checkboxState && onCheckboxChange) {\n      // Render checkbox.\n      const idValue = rowData[checkbox.idProp];\n      const isSelected = checkboxState[prop].selected.has(idValue); // Source for using visually hidden: https://www.w3.org/WAI/tutorials/forms/labels/#hiding-the-label-element.\n\n      value = React.createElement(Form.Group, {\n        controlId: `table-selection-${rowData[checkbox.idProp]}`\n      }, React.createElement(Form.Label, {\n        className: \"visually-hidden\"\n      }, isSelected ? `Remove ${idValue} from selection` : `Add ${idValue} to selection`), React.createElement(Form.Check, {\n        type: \"checkbox\",\n        name: \"table-selection\",\n        value: rowData[checkbox.idProp],\n        className: checkbox.className,\n        checked: checkboxState[prop].selected.has(idValue),\n        onChange: () => {\n          onCheckboxChange({\n            prop,\n            idProp: checkbox.idProp,\n            nextCheckboxState: getNextCheckboxState({\n              checkboxState,\n              data: rowData,\n              idProp: checkbox.idProp,\n              filteredDataLength,\n              prop,\n              type: isSelected ? 'remove' : 'add'\n            }),\n            checkboxRefs\n          });\n        }\n      }));\n    } else {\n      // Render normally.\n      if (cell === undefined) {\n        value = rowData[prop];\n      } else {\n        value = cell(rowData);\n      }\n    }\n\n    row.push(React.createElement(\"td\", {\n      key: `col-${colIdx}`,\n      className: makeClasses('tbody-td', classes === null || classes === void 0 ? void 0 : classes.td, // Alignment.\n      {\n        'text-start': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'left',\n        'text-center': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'center',\n        'text-end': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'right'\n      }, typeof cellProps.className === 'function' ? cellProps.className(rowData) : cellProps.className),\n      style: typeof cellProps.style === 'function' ? cellProps.style(rowData) : cellProps.style\n    }, value));\n  }\n\n  let passedRowProps = {};\n\n  if (typeof rowProps === 'function') {\n    passedRowProps = rowProps(rowData);\n  } else if (rowProps !== undefined) {\n    passedRowProps = rowProps;\n  }\n\n  return React.createElement(\"tr\", Object.assign({}, passedRowProps, {\n    className: makeClasses('tbody-tr', classes === null || classes === void 0 ? void 0 : classes.tr, passedRowProps === null || passedRowProps === void 0 ? void 0 : passedRowProps.className),\n    onClick: onRowClick\n  }), row);\n}\n/**\n * `EmptyTablePlaceholder` is a component used to indicate that a table is empty, or doesn't\n * have matching search results.\n *\n * @param param0\n * @returns\n */\n\nexport function EmptyTablePlaceholder(_ref3) {\n  let {\n    className,\n    noResultsLabel\n  } = _ref3;\n  const {\n    headers\n  } = useDatatableWrapper();\n  return React.createElement(\"tr\", {\n    className: makeClasses('tbody-tr', className)\n  }, React.createElement(\"td\", {\n    className: \"tbody-td\",\n    colSpan: headers.length\n  }, noResultsLabel || 'No results to be shown.'));\n}","map":{"version":3,"names":["React","Form","makeClasses","useDatatableWrapper","getNextCheckboxState","TableBody","labels","classes","rowProps","onRowClick","onRowClickProp","controlledProps","children","data","headers","onCheckboxChange","onCheckboxChangeContext","checkboxState","checkboxStateContext","filteredDataLength","filteredDataLengthContext","checkboxRefs","bodyContent","body","dataLength","length","headersLength","rowIdx","row","colIdx","cell","cellProps","prop","rawProp","checkbox","alignment","toString","value","idValue","idProp","isSelected","selected","has","createElement","Group","controlId","Label","className","Check","type","name","checked","onChange","nextCheckboxState","undefined","push","key","td","horizontal","style","TableRow","rowData","tr","EmptyTablePlaceholder","noResultsLabel","noResults","tbody","passedRowProps","Object","assign","onClick","colSpan"],"sources":["C:/wamp64/www/KV/bankovnisustav/node_modules/react-bs-datatable/lib/esm/components/TableBody.js"],"sourcesContent":["import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { makeClasses } from '../helpers/object';\nimport { useDatatableWrapper } from './DatatableWrapper';\nimport { getNextCheckboxState } from '../helpers/checkbox';\n/**\n * Renders the table body, which is a `tbody` tag along with the rest of the elements,\n * such as `tr` and `td` tags.\n */\nexport function TableBody({ labels, classes, rowProps, onRowClick: onRowClickProp, controlledProps, children }) {\n    const { data, headers, onCheckboxChange: onCheckboxChangeContext, checkboxState: checkboxStateContext, filteredDataLength: filteredDataLengthContext, checkboxRefs } = useDatatableWrapper();\n    let bodyContent;\n    if (children) {\n        if (typeof children === 'function') {\n            bodyContent = children(data);\n        }\n        else {\n            bodyContent = children;\n        }\n    }\n    else {\n        const body = [];\n        const dataLength = data.length;\n        const headersLength = headers.length;\n        const onCheckboxChange = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.onCheckboxChange) || onCheckboxChangeContext;\n        const checkboxState = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.checkboxState) || checkboxStateContext;\n        const filteredDataLength = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.filteredDataLength) || filteredDataLengthContext;\n        if (dataLength > 0) {\n            for (let rowIdx = 0; rowIdx < dataLength; rowIdx++) {\n                const row = [];\n                for (let colIdx = 0; colIdx < headersLength; colIdx++) {\n                    const { cell, cellProps = {}, prop: rawProp, checkbox, alignment } = headers[colIdx];\n                    const prop = rawProp.toString();\n                    let value = '';\n                    if (checkbox) {\n                        // Render checkbox.\n                        const idValue = data[rowIdx][checkbox.idProp];\n                        const isSelected = checkboxState[prop].selected.has(idValue);\n                        // Source for using visually hidden: https://www.w3.org/WAI/tutorials/forms/labels/#hiding-the-label-element.\n                        value = (React.createElement(Form.Group, { controlId: `table-selection-${data[rowIdx][checkbox.idProp]}` },\n                            React.createElement(Form.Label, { className: \"visually-hidden\" }, isSelected\n                                ? `Remove ${idValue} from selection`\n                                : `Add ${idValue} to selection`),\n                            React.createElement(Form.Check, { type: \"checkbox\", name: \"table-selection\", value: data[rowIdx][checkbox.idProp], className: checkbox.className, checked: checkboxState[prop].selected.has(idValue), onChange: () => {\n                                    onCheckboxChange({\n                                        prop,\n                                        idProp: checkbox.idProp,\n                                        nextCheckboxState: getNextCheckboxState({\n                                            checkboxState,\n                                            data: data[rowIdx],\n                                            idProp: checkbox.idProp,\n                                            filteredDataLength,\n                                            prop,\n                                            type: isSelected ? 'remove' : 'add'\n                                        }),\n                                        checkboxRefs\n                                    });\n                                } })));\n                    }\n                    else {\n                        // Render normally.\n                        if (cell === undefined) {\n                            value = data[rowIdx][prop];\n                        }\n                        else {\n                            value = cell(data[rowIdx]);\n                        }\n                    }\n                    row.push(React.createElement(\"td\", { key: `col-${rowIdx}${colIdx}`, className: makeClasses('tbody-td', classes === null || classes === void 0 ? void 0 : classes.td, \n                        // Alignment.\n                        {\n                            'text-start': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'left',\n                            'text-center': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'center',\n                            'text-end': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'right'\n                        }, typeof cellProps.className === 'function'\n                            ? cellProps.className(data[rowIdx])\n                            : cellProps.className), style: typeof cellProps.style === 'function'\n                            ? cellProps.style(data[rowIdx])\n                            : cellProps.style }, value));\n                }\n                body.push(React.createElement(TableRow, { key: rowIdx, rowData: data[rowIdx], rowProps: rowProps, classes: { td: classes === null || classes === void 0 ? void 0 : classes.td, tr: classes === null || classes === void 0 ? void 0 : classes.tr }, controlledProps: controlledProps, onRowClick: onRowClickProp }));\n            }\n        }\n        else {\n            body.push(React.createElement(EmptyTablePlaceholder, { key: \"row-zero-length\", noResultsLabel: labels === null || labels === void 0 ? void 0 : labels.noResults }));\n        }\n        bodyContent = body;\n    }\n    return (React.createElement(\"tbody\", { className: makeClasses('tbody', classes === null || classes === void 0 ? void 0 : classes.tbody) }, bodyContent));\n}\n/**\n * `TableRow` component, as its name suggests, is a component to render a row of a table.\n * This component is exported so it is possible to compose the rows further. For example:\n *\n * ```\n * <TableBody>\n *   {\n *     data.map(row => (\n *       row.isLoading ? (\n *         <tr><td colSpan={headers.length}><Loading /></td></tr>\n *       ) : (\n *         <TableRow rowData={row} />\n *       )\n *     ))\n *   }\n * </TableBody>\n * ```\n *\n * The above snippet will render loading indicator for rows that don't have sufficient data to store yet.\n *\n * @param param0\n * @returns\n */\nexport function TableRow({ rowData, onRowClick: onRowClickProp, classes, controlledProps, rowProps }) {\n    const { headers, onCheckboxChange: onCheckboxChangeContext, checkboxState: checkboxStateContext, filteredDataLength: filteredDataLengthContext, checkboxRefs } = useDatatableWrapper();\n    const headersLength = headers.length;\n    function onRowClick() {\n        if (typeof onRowClickProp === 'function') {\n            onRowClickProp(rowData);\n        }\n    }\n    const onCheckboxChange = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.onCheckboxChange) || onCheckboxChangeContext;\n    const checkboxState = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.checkboxState) || checkboxStateContext;\n    const filteredDataLength = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.filteredDataLength) || filteredDataLengthContext;\n    const row = [];\n    for (let colIdx = 0; colIdx < headersLength; colIdx++) {\n        const { cell, cellProps = {}, prop: rawProp, checkbox, alignment } = headers[colIdx];\n        const prop = rawProp.toString();\n        let value = '';\n        if (checkbox && checkboxState && onCheckboxChange) {\n            // Render checkbox.\n            const idValue = rowData[checkbox.idProp];\n            const isSelected = checkboxState[prop].selected.has(idValue);\n            // Source for using visually hidden: https://www.w3.org/WAI/tutorials/forms/labels/#hiding-the-label-element.\n            value = (React.createElement(Form.Group, { controlId: `table-selection-${rowData[checkbox.idProp]}` },\n                React.createElement(Form.Label, { className: \"visually-hidden\" }, isSelected\n                    ? `Remove ${idValue} from selection`\n                    : `Add ${idValue} to selection`),\n                React.createElement(Form.Check, { type: \"checkbox\", name: \"table-selection\", value: rowData[checkbox.idProp], className: checkbox.className, checked: checkboxState[prop].selected.has(idValue), onChange: () => {\n                        onCheckboxChange({\n                            prop,\n                            idProp: checkbox.idProp,\n                            nextCheckboxState: getNextCheckboxState({\n                                checkboxState,\n                                data: rowData,\n                                idProp: checkbox.idProp,\n                                filteredDataLength,\n                                prop,\n                                type: isSelected ? 'remove' : 'add'\n                            }),\n                            checkboxRefs\n                        });\n                    } })));\n        }\n        else {\n            // Render normally.\n            if (cell === undefined) {\n                value = rowData[prop];\n            }\n            else {\n                value = cell(rowData);\n            }\n        }\n        row.push(React.createElement(\"td\", { key: `col-${colIdx}`, className: makeClasses('tbody-td', classes === null || classes === void 0 ? void 0 : classes.td, \n            // Alignment.\n            {\n                'text-start': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'left',\n                'text-center': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'center',\n                'text-end': (alignment === null || alignment === void 0 ? void 0 : alignment.horizontal) === 'right'\n            }, typeof cellProps.className === 'function'\n                ? cellProps.className(rowData)\n                : cellProps.className), style: typeof cellProps.style === 'function'\n                ? cellProps.style(rowData)\n                : cellProps.style }, value));\n    }\n    let passedRowProps = {};\n    if (typeof rowProps === 'function') {\n        passedRowProps = rowProps(rowData);\n    }\n    else if (rowProps !== undefined) {\n        passedRowProps = rowProps;\n    }\n    return (React.createElement(\"tr\", Object.assign({}, passedRowProps, { className: makeClasses('tbody-tr', classes === null || classes === void 0 ? void 0 : classes.tr, passedRowProps === null || passedRowProps === void 0 ? void 0 : passedRowProps.className), onClick: onRowClick }), row));\n}\n/**\n * `EmptyTablePlaceholder` is a component used to indicate that a table is empty, or doesn't\n * have matching search results.\n *\n * @param param0\n * @returns\n */\nexport function EmptyTablePlaceholder({ className, noResultsLabel }) {\n    const { headers } = useDatatableWrapper();\n    return (React.createElement(\"tr\", { className: makeClasses('tbody-tr', className) },\n        React.createElement(\"td\", { className: \"tbody-td\", colSpan: headers.length }, noResultsLabel || 'No results to be shown.')));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}