{"ast":null,"code":"/**\n * @internal\n *\n * This function is used to get the next checkbox state. This function is separated\n * because the checkbox state is used in both `TableHeader` and `TableBody` components.\n */\nexport function getNextCheckboxState(_ref) {\n  let {\n    checkboxState,\n    prop,\n    data,\n    filteredDataLength,\n    idProp,\n    type\n  } = _ref;\n  const nextCheckboxState = Object.assign({}, checkboxState[prop]); // None selected.\n  // This one is easy, just add all of them.\n\n  if (checkboxState[prop].state === 'none-selected') {\n    const newSet = new Set();\n\n    if (Array.isArray(data)) {\n      for (const row of data) {\n        newSet.add(row[idProp]);\n      }\n    } else {\n      newSet.add(data[idProp]);\n    }\n\n    nextCheckboxState.selected = newSet;\n    nextCheckboxState.state = newSet.size === filteredDataLength ? 'all-selected' : 'some-selected';\n    return nextCheckboxState;\n  } // Some, or all selected.\n  // This is a bit tricky, because we need to consider whether we want to add or remove.\n\n\n  const newSet = new Set(checkboxState[prop].selected);\n\n  if (Array.isArray(data)) {\n    for (const row of data) {\n      const value = row[idProp];\n      addOrRemoveFromSet(newSet, value, type);\n    }\n  } else {\n    addOrRemoveFromSet(newSet, data[idProp], type);\n  }\n\n  nextCheckboxState.selected = newSet;\n  nextCheckboxState.state = newSet.size === 0 ? 'none-selected' : newSet.size === filteredDataLength ? 'all-selected' : 'some-selected';\n  return nextCheckboxState;\n} // Helper functions.\n\nfunction addOrRemoveFromSet(set, value, type) {\n  // Depending on the checkbox state, delete or add.\n  if (type === 'remove') {\n    set.delete(value);\n  } else {\n    set.add(value);\n  }\n}","map":{"version":3,"names":["getNextCheckboxState","checkboxState","prop","data","filteredDataLength","idProp","type","nextCheckboxState","Object","assign","state","newSet","Set","Array","isArray","row","add","selected","size","value","addOrRemoveFromSet","set","delete"],"sources":["C:/wamp64/www/KV/bankovnisustav/node_modules/react-bs-datatable/lib/esm/helpers/checkbox.js"],"sourcesContent":["/**\n * @internal\n *\n * This function is used to get the next checkbox state. This function is separated\n * because the checkbox state is used in both `TableHeader` and `TableBody` components.\n */\nexport function getNextCheckboxState({ checkboxState, prop, data, filteredDataLength, idProp, type }) {\n    const nextCheckboxState = Object.assign({}, checkboxState[prop]);\n    // None selected.\n    // This one is easy, just add all of them.\n    if (checkboxState[prop].state === 'none-selected') {\n        const newSet = new Set();\n        if (Array.isArray(data)) {\n            for (const row of data) {\n                newSet.add(row[idProp]);\n            }\n        }\n        else {\n            newSet.add(data[idProp]);\n        }\n        nextCheckboxState.selected = newSet;\n        nextCheckboxState.state =\n            newSet.size === filteredDataLength ? 'all-selected' : 'some-selected';\n        return nextCheckboxState;\n    }\n    // Some, or all selected.\n    // This is a bit tricky, because we need to consider whether we want to add or remove.\n    const newSet = new Set(checkboxState[prop].selected);\n    if (Array.isArray(data)) {\n        for (const row of data) {\n            const value = row[idProp];\n            addOrRemoveFromSet(newSet, value, type);\n        }\n    }\n    else {\n        addOrRemoveFromSet(newSet, data[idProp], type);\n    }\n    nextCheckboxState.selected = newSet;\n    nextCheckboxState.state =\n        newSet.size === 0\n            ? 'none-selected'\n            : newSet.size === filteredDataLength\n                ? 'all-selected'\n                : 'some-selected';\n    return nextCheckboxState;\n}\n// Helper functions.\nfunction addOrRemoveFromSet(set, value, type) {\n    // Depending on the checkbox state, delete or add.\n    if (type === 'remove') {\n        set.delete(value);\n    }\n    else {\n        set.add(value);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,oBAAT,OAA+F;EAAA,IAAjE;IAAEC,aAAF;IAAiBC,IAAjB;IAAuBC,IAAvB;IAA6BC,kBAA7B;IAAiDC,MAAjD;IAAyDC;EAAzD,CAAiE;EAClG,MAAMC,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,aAAa,CAACC,IAAD,CAA/B,CAA1B,CADkG,CAElG;EACA;;EACA,IAAID,aAAa,CAACC,IAAD,CAAb,CAAoBQ,KAApB,KAA8B,eAAlC,EAAmD;IAC/C,MAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;;IACA,IAAIC,KAAK,CAACC,OAAN,CAAcX,IAAd,CAAJ,EAAyB;MACrB,KAAK,MAAMY,GAAX,IAAkBZ,IAAlB,EAAwB;QACpBQ,MAAM,CAACK,GAAP,CAAWD,GAAG,CAACV,MAAD,CAAd;MACH;IACJ,CAJD,MAKK;MACDM,MAAM,CAACK,GAAP,CAAWb,IAAI,CAACE,MAAD,CAAf;IACH;;IACDE,iBAAiB,CAACU,QAAlB,GAA6BN,MAA7B;IACAJ,iBAAiB,CAACG,KAAlB,GACIC,MAAM,CAACO,IAAP,KAAgBd,kBAAhB,GAAqC,cAArC,GAAsD,eAD1D;IAEA,OAAOG,iBAAP;EACH,CAlBiG,CAmBlG;EACA;;;EACA,MAAMI,MAAM,GAAG,IAAIC,GAAJ,CAAQX,aAAa,CAACC,IAAD,CAAb,CAAoBe,QAA5B,CAAf;;EACA,IAAIJ,KAAK,CAACC,OAAN,CAAcX,IAAd,CAAJ,EAAyB;IACrB,KAAK,MAAMY,GAAX,IAAkBZ,IAAlB,EAAwB;MACpB,MAAMgB,KAAK,GAAGJ,GAAG,CAACV,MAAD,CAAjB;MACAe,kBAAkB,CAACT,MAAD,EAASQ,KAAT,EAAgBb,IAAhB,CAAlB;IACH;EACJ,CALD,MAMK;IACDc,kBAAkB,CAACT,MAAD,EAASR,IAAI,CAACE,MAAD,CAAb,EAAuBC,IAAvB,CAAlB;EACH;;EACDC,iBAAiB,CAACU,QAAlB,GAA6BN,MAA7B;EACAJ,iBAAiB,CAACG,KAAlB,GACIC,MAAM,CAACO,IAAP,KAAgB,CAAhB,GACM,eADN,GAEMP,MAAM,CAACO,IAAP,KAAgBd,kBAAhB,GACI,cADJ,GAEI,eALd;EAMA,OAAOG,iBAAP;AACH,C,CACD;;AACA,SAASa,kBAAT,CAA4BC,GAA5B,EAAiCF,KAAjC,EAAwCb,IAAxC,EAA8C;EAC1C;EACA,IAAIA,IAAI,KAAK,QAAb,EAAuB;IACnBe,GAAG,CAACC,MAAJ,CAAWH,KAAX;EACH,CAFD,MAGK;IACDE,GAAG,CAACL,GAAJ,CAAQG,KAAR;EACH;AACJ"},"metadata":{},"sourceType":"module"}